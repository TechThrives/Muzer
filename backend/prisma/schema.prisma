// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String   // Store hashed passwords
  rooms    Room[]   // Rooms created by the user
  votes    Vote[]   // Votes cast by the user
  songs    Song[]   // Songs added by the user (limit 2 per room)
}

model Room {
  id            String   @id @default(uuid())
  code          String   @unique // Unique room code
  hostId        String
  host          User     @relation(fields: [hostId], references: [id])
  currentSongId String?
  currentSong   Song?    @relation("CurrentSong", fields: [currentSongId], references: [id])
  songs         Song[]   @relation("RoomSongs")
  createdAt     DateTime @default(now())
}

model Song {
  id           String   @id @default(uuid())
  title        String
  artist       String
  url          String   // Path to the song file
  rooms        Room[]   @relation("RoomSongs")
  currentRooms Room[]   @relation("CurrentSong")
  addedById    String
  addedBy      User     @relation(fields: [addedById], references: [id])
  votes        Vote[]
  createdAt    DateTime @default(now())
  voteCount    Int      @default(0) // Track votes
}

model Vote {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  songId    String
  song      Song     @relation(fields: [songId], references: [id])
  value     Int      // -1 for downvote, 1 for upvote
  createdAt DateTime @default(now())

  @@unique([userId, songId]) // One vote per user per song
}
